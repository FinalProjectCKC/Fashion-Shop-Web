{"ast":null,"code":"var _jsxFileName = \"/Users/ad/Downloads/Pickbazar - React GraphQL Ecommerce Template/pickbazar/packages/shop/containers/Products/ProductsBook.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nimport ProductCard from 'components/ProductCard/ProductCardBook';\nimport { ProductsRow, ProductsCol, ButtonWrapper, LoaderWrapper, LoaderItem, ProductCardWrapper } from './Products.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport Button from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport Placeholder from 'components/Placeholder/Placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/NoResult/NoResult';\nconst GET_PRODUCTS = gql`\n  query getProducts(\n    $type: String\n    $text: String\n    $category: String\n    $offset: Int\n    $limit: Int\n  ) {\n    products(\n      type: $type\n      text: $text\n      category: $category\n      offset: $offset\n      limit: $limit\n    ) {\n      items {\n        id\n        title\n        slug\n        price\n        salePrice\n        discountInPercent\n        type\n        image\n        author {\n          id\n          name\n        }\n      }\n      hasMore\n    }\n  }\n`;\nexport const Products = ({\n  deviceType,\n  type,\n  fetchLimit = 8,\n  loadMore = true\n}) => {\n  const router = useRouter();\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      text: router.query.text,\n      category: router.query.category,\n      offset: 0,\n      limit: fetchLimit\n    }\n  });\n\n  if (loading) {\n    return __jsx(LoaderWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, __jsx(LoaderItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(Placeholder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), __jsx(LoaderItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, __jsx(Placeholder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), __jsx(LoaderItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, __jsx(Placeholder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, error.message);\n\n  if (!data || !data.products || data.products.items.length === 0) {\n    return __jsx(NoResultFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    });\n  }\n\n  const handleLoadMore = () => {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        toggleLoading(false);\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            items: [...prev.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, data.products.items.map((item, index) => {\n    var _item$author;\n\n    return __jsx(ProductsCol, {\n      key: index,\n      style: {\n        paddingLeft: 0,\n        paddingRight: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(ProductCardWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(Fade, {\n      duration: 800,\n      delay: index * 10,\n      style: {\n        height: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(ProductCard, {\n      title: item.title,\n      image: item.image,\n      name: item === null || item === void 0 ? void 0 : (_item$author = item.author) === null || _item$author === void 0 ? void 0 : _item$author.name,\n      data: item,\n      deviceType: deviceType,\n      onClick: () => router.push('/product/[slug]', `/product/${item.slug}`),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))));\n  })), loadMore && data.products.hasMore && __jsx(ButtonWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, __jsx(Button, {\n    onClick: handleLoadMore,\n    title: \"Load More\",\n    size: \"small\",\n    isLoading: loadingMore,\n    intlButtonId: \"loadMoreBtn\",\n    loader: __jsx(Loader, {\n      color: \"#009E7F\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }),\n    style: {\n      minWidth: 135,\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#009E7F'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })));\n};\nexport default Products;","map":{"version":3,"sources":["/Users/ad/Downloads/Pickbazar - React GraphQL Ecommerce Template/pickbazar/packages/shop/containers/Products/ProductsBook.tsx"],"names":["React","useState","useRouter","gql","ProductCard","ProductsRow","ProductsCol","ButtonWrapper","LoaderWrapper","LoaderItem","ProductCardWrapper","useQuery","Button","Loader","Placeholder","Fade","NoResultFound","GET_PRODUCTS","Products","deviceType","type","fetchLimit","loadMore","router","loadingMore","toggleLoading","data","error","loading","fetchMore","variables","text","query","category","offset","limit","message","products","items","length","handleLoadMore","Number","updateQuery","prev","fetchMoreResult","__typename","hasMore","map","item","index","paddingLeft","paddingRight","height","title","image","author","name","push","slug","minWidth","backgroundColor","border","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nimport ProductCard from 'components/ProductCard/ProductCardBook';\nimport {\n  ProductsRow,\n  ProductsCol,\n  ButtonWrapper,\n  LoaderWrapper,\n  LoaderItem,\n  ProductCardWrapper,\n} from './Products.style';\nimport { CURRENCY } from 'helper/constant';\nimport { useQuery } from '@apollo/react-hooks';\nimport Button from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport Placeholder from 'components/Placeholder/Placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/NoResult/NoResult';\n\nconst GET_PRODUCTS = gql`\n  query getProducts(\n    $type: String\n    $text: String\n    $category: String\n    $offset: Int\n    $limit: Int\n  ) {\n    products(\n      type: $type\n      text: $text\n      category: $category\n      offset: $offset\n      limit: $limit\n    ) {\n      items {\n        id\n        title\n        slug\n        price\n        salePrice\n        discountInPercent\n        type\n        image\n        author {\n          id\n          name\n        }\n      }\n      hasMore\n    }\n  }\n`;\n\ntype ProductsProps = {\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n  type: string;\n  fetchLimit?: number;\n  loadMore?: boolean;\n};\nexport const Products: React.FC<ProductsProps> = ({\n  deviceType,\n  type,\n  fetchLimit = 8,\n  loadMore = true,\n}) => {\n  const router = useRouter();\n  const [loadingMore, toggleLoading] = useState(false);\n  const { data, error, loading, fetchMore } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      text: router.query.text,\n      category: router.query.category,\n      offset: 0,\n      limit: fetchLimit,\n    },\n  });\n\n  if (loading) {\n    return (\n      <LoaderWrapper>\n        <LoaderItem>\n          <Placeholder />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder />\n        </LoaderItem>\n        <LoaderItem>\n          <Placeholder />\n        </LoaderItem>\n      </LoaderWrapper>\n    );\n  }\n\n  if (error) return <div>{error.message}</div>;\n  if (!data || !data.products || data.products.items.length === 0) {\n    return <NoResultFound />;\n  }\n  const handleLoadMore = () => {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit,\n      },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        toggleLoading(false);\n        if (!fetchMoreResult) {\n          return prev;\n        }\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            items: [...prev.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore,\n          },\n        };\n      },\n    });\n  };\n\n  return (\n    <>\n      <ProductsRow>\n        {data.products.items.map((item: any, index: number) => (\n          <ProductsCol key={index} style={{ paddingLeft: 0, paddingRight: 1 }}>\n            <ProductCardWrapper>\n              <Fade\n                duration={800}\n                delay={index * 10}\n                style={{ height: '100%' }}\n              >\n                <ProductCard\n                  title={item.title}\n                  image={item.image}\n                  name={item?.author?.name}\n                  data={item}\n                  deviceType={deviceType}\n                  onClick={() =>\n                    router.push('/product/[slug]', `/product/${item.slug}`)\n                  }\n                />\n              </Fade>\n            </ProductCardWrapper>\n          </ProductsCol>\n        ))}\n      </ProductsRow>\n      {loadMore && data.products.hasMore && (\n        <ButtonWrapper>\n          <Button\n            onClick={handleLoadMore}\n            title='Load More'\n            size='small'\n            isLoading={loadingMore}\n            intlButtonId='loadMoreBtn'\n            loader={<Loader color='#009E7F' />}\n            style={{\n              minWidth: 135,\n              backgroundColor: '#ffffff',\n              border: '1px solid #f1f1f1',\n              color: '#009E7F',\n            }}\n          />\n        </ButtonWrapper>\n      )}\n    </>\n  );\n};\nexport default Products;\n"]},"metadata":{},"sourceType":"module"}